import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import GridSearchCV

# Verileri okuyun
train_data = pd.read_csv('train.csv')
test_data = pd.read_csv('test.csv')
sample_submission = pd.read_csv('sample_submission.csv')

# Eğitim verilerini işleyin
mean = train_data['Item_Weight'].mean()
train_data['Item_Weight'].fillna(mean, inplace=True)

mode = train_data['Outlet_Size'].mode()[0]
train_data['Outlet_Size'].fillna(mode, inplace=True)

train_data = train_data.drop(['Item_Identifier', 'Outlet_Identifier'], axis=1)
train_data = pd.get_dummies(train_data)

# Test verilerini işleyin
mean = test_data['Item_Weight'].mean()
test_data['Item_Weight'].fillna(mean, inplace=True)

mode = test_data['Outlet_Size'].mode()[0]
test_data['Outlet_Size'].fillna(mode, inplace=True)

test_data = test_data.drop(['Item_Identifier', 'Outlet_Identifier'], axis=1)
test_data = pd.get_dummies(test_data)

# Hedef değişkeni ve özellikleri ayırın
X = train_data.drop('Item_Outlet_Sales', axis=1)
y = train_data['Item_Outlet_Sales']

# Verileri eğitim ve test veri setlerine ayırın
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Özellikleri ölçeklendirin
scaler = MinMaxScaler(feature_range=(0, 1))
x_train_scaled = scaler.fit_transform(x_train)
x_train = pd.DataFrame(x_train_scaled)

x_test_scaled = scaler.transform(x_test)
x_test = pd.DataFrame(x_test_scaled)

# K-Nearest Neighbors modelini oluşturun ve eğitin
knn = KNeighborsRegressor(n_neighbors=5)
knn.fit(x_train, y_train)

# Modeli test veri seti üzerinde değerlendirin
y_pred = knn.predict(x_test)

# Hata ölçümünü hesaplayın
rmse = mean_squared_error(y_test, y_pred, squared=False)
print(f"RMSE değeri: {rmse}")

# En iyi K değerini bulmak için Grid Search kullanın
param_grid = {'n_neighbors': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}
grid_search = GridSearchCV(knn, param_grid, cv=5)
grid_search.fit(x_train, y_train)
best_k = grid_search.best_params_['n_neighbors']
print("En iyi K değeri:", best_k)

# Test veri kümesi üzerinde tahminler yapın
x_test_scaled = scaler.transform(test_data)
x_test = pd.DataFrame(x_test_scaled)
predictions = knn.predict(x_test)

# Sonuçları sample_submission formatında oluşturun
sample_submission['Item_Outlet_Sales'] = predictions

# Sonuçları bir CSV dosyasına kaydedin
sample_submission.to_csv('submission.csv', index=False)
